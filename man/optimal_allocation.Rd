% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimal_allocation.R
\name{optimal_allocation}
\alias{optimal_allocation}
\title{Estimate optimal allocation}
\usage{
optimal_allocation(
  data,
  N_sample,
  strata,
  stratifying,
  min_per_bin = 1,
  threshold = 0.5,
  pi1 = NULL,
  pi0 = NULL,
  recall = NULL,
  external_k = NULL,
  external_positive_share = NULL,
  weight_se_f1 = 1,
  weight_se_rec = 0,
  weight_se_prec = 0
)
}
\arguments{
\item{data}{A data.frame from which to sample observations. One column should
contain the strata used for sampling.}

\item{N_sample}{A numeric value capturing the desired sample size.}

\item{strata}{A character value capturing the column name of the sampling strata.
Column should contain factor or character values.}

\item{stratifying}{A character value capturing the column name of the stratifying
variable. This column should contain continuous numeric values between 0 and 1
(predicted probability of exhibiting the outcome).}

\item{min_per_bin}{A numeric value capturing the minimum number of observations per bin.
Default is 1.}

\item{threshold}{A numeric value capturing the threshold for binary classification.}

\item{pi1}{A numeric value capturing the expected precision (share of cases
exhibiting the outcome out of predicted positives). This value must be entered
for the function to produce an output.}

\item{pi0}{A numeric value capturing the inverse of the expected precision for
the negative class (share of cases exhibiting the outcome out of predicted
negatives). If left blank, the function computes `pi0` from recall and imbalance
if `pi0` is not explicitly entered.}

\item{recall}{A numeric value capturing the expected value of recall (share of
positive cases among those exhibiting the outcome). This value only needs to be
entered if `pi0` is left blank.}

\item{external_k}{A numeric value capturing the imbalance ratio (number of predicted
positives over predicted negatives) in the population on which the recall estimate
is based. This only needs to be entered if `recall` is based on a population
that has a different imbalance than the test's population. The argument is
only required if `pi0` is not entered directly. If left blank, it will be
calculated internally using `external_positive_share`, if this is entered, or
assumed to be equal to the test population's imbalance.}

\item{external_positive_share}{A numeric value capturing the positive share
(number of predicted positives out of all observations) in the population on
which the recall estimate is based. This only needs to be entered if `recall`
is based on a population that has a different imbalance than the test's population.
The argument is only required if `pi0` is not entered directly. If left blank,
it will be calculated internally using `external_positive_share`, if this is
entered, or assumed to be equal to the test population's imbalance.}

\item{weight_se_f1}{A numeric value between 0 and 1 capturing how much to weigh
the SE for the F1 score in the objective function to be minimized. The default
for `weight_se_f1` is `1`.}

\item{weight_se_rec}{A numeric value between 0 and 1 capturing how much to weigh
the SE for recall in the objective function to be minimized. The default for
`weight_se_rec` is `0`.}

\item{weight_se_prec}{A numeric value between 0 and 1 capturing how much
to weigh the SE for precision in the objective function to be minimized. The
default for `weight_se_prec` is `0`.}
}
\value{
A named vector whose values indicate the number of observations to be
sampled per each stratum, and whose names correspond to the values in the
`strata` variable of the input dataset.
}
\description{
This function shows how many observations to sample per stratum under optimal two-bin allocation
}
\details{
This function can be used to determine how many observations to sample per stratum
under optimal allocation. It first determines how many positive observations to
sample in the test set, given parameter values and objective function, calling
\code{\link{optimal_n_positives}} internally. This is the value that minimizes an
objective function subject to a sample size constraint (see documentation of function
\code{\link{optimal_n_positives}} for details). Then, the function performs
proportional allocation within the positive and negative subsamples separately,
adjusting the number of sampled observations per bin so that the overall sample
size is as close to the target as possible.
}
\examples{
## example 1: say that we want to sample observations using two-bin stratification
## of positives and negatives (dichotomized at 0.5 threshold), picking the number
## of positives and negatives optimally, subject to a sample size constraint that
## N_positive + N_negative = 500. here, assume we're minimizing the objective
## function SE(F1) + 0.5 SE(precision) + 0.5 SE(recall). as assumptions, we have
## guesses for pi1 (TP/TP+FP) and pi0 (FN/FN+TN) of 0.4 and 0.02.
data(pop_df)
pop_df$strata <- ifelse(pop_df$score>=0.5, "yes", "no")
optimal_allocation(data = pop_df, N_sample = 500, strata = 'strata',
                   stratifying = 'score', min_per_bin=1, threshold=0.5, pi1=0.4,
                   pi0=0.2, weight_se_f1=1, weight_se_rec=0.5, weight_se_prec=0.5)
## example 2: same but we now want to further implement proportional stratification
## within the positives and negatives separately, after having sampled the optimal
## number of positives and negatives subject to the sample size constraint. also,
## instead of making a guess about pi0, we make a guess about recall (0.6) based on
## previous literature, and specify the imbalance in the data were said recall was
## estimated (20\% positives). objective function and constraints are as above.
data(pop_df)
pop_df$strata <- cut(pop_df$score, breaks=seq(0,1,0.1))
optimal_allocation(data = pop_df, N_sample = 500, strata = 'strata',
                   stratifying = 'score', min_per_bin=1, threshold=0.5, pi1=0.4,
                   recall=0.6, external_positive_share=0.2,
                   weight_se_f1=1, weight_se_rec=0.5, weight_se_prec=0.5)
## example 3: like example 2 but assuming only care about F1, and assuming we
## specify the imbalance ratio in the dataset where recall was estimated: we
## know it has 1 positive for every 2 negatives so external_k is 1/2=0.5
data(pop_df)
pop_df$strata <- cut(pop_df$score, breaks=seq(0,1,0.1))
optimal_allocation(data = pop_df, N_sample = 500, strata = 'strata',
                   stratifying = 'score', min_per_bin=1, threshold=0.5,
                   pi1=0.4, recall=0.6, external_k=0.5,
                   weight_se_f1=1, weight_se_rec=0, weight_se_prec=0)
## note the function disregards NAs in the strata variable
## note that for optimal allocation the strata must be based somehow on predicted
## probabilities (quantile- or fixed-intervals, where each stratum contains only
## positives or only negatives but not both)
}
