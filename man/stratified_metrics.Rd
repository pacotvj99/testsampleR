% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stratified_metrics.R
\name{stratified_metrics}
\alias{stratified_metrics}
\title{Estimate performance metrics from test set}
\usage{
stratified_metrics(
  data,
  truth,
  pred,
  probs = NULL,
  threshold,
  se = TRUE,
  bs = NULL,
  strata,
  seed = 1234,
  alpha = 0.05
)
}
\arguments{
\item{data}{A data.frame containing the annotated test set.}

\item{truth}{A character value capturing the column name of the annotated labels.
Column should capture whether each observation exhibits the outcome (1/TRUE)
or not (0/FALSE).}

\item{pred}{A character value capturing the column name of the classifier's
predictions. Column should capture each observation's predicted label (either
numeric or logical), or the predicted probability of exhibiting the outcome (numeric).
Default is NULL, which assumes equal sampling probability across observations.}

\item{probs}{A character value capturing the column name of the sampling probabilities.}

\item{threshold}{A numeric value capturing the threshold for binary classification.}

\item{se}{A character vector indicating whether SEs should be calculated. If all
observations have the same sampling probability, the function calls `se_srs` to
estimate SEs using the analytical formula. In this case, Wilson CI lower and
upper bounds for precision, recall and F1 score are also outputted. If observations
do not have the same sampling probability, then the function calls `se_strat` to
compute stratified SEs: this assumes that the stratification was done on the basis
of positives and negatives (if proportional stratification was used within the
positives and negatives separately, the SEs are conservative). If stratification
was done on some other variable, then `se` should be set to FALSE, and bootstrapping
should be used instead.}

\item{bs}{A numeric value indicating the number of bootstrapping iterations used
to compute confidence intervals. If `NULL`, then bootstrapping is not implemented.
For stratified sampling, bootstrapping is stratified by stratum too.}

\item{strata}{A character value capturing the column name of the sampling strata.
Column should contain factor or character values. This only needs to be entered if
`bs` is not `NULL` and the sampling was stratified (sampling probabilities are not
constant across observations).}

\item{seed}{A numeric value used as seed for the bootstrapping.}

\item{alpha}{A numeric value used capturing the type-I error rate for constructing
confidence intervals (applies to both bootstrapping and analytic CIs).}
}
\value{
A data.frame of performance metrics. The following
metrics are supported: precision, recall, F1 of positive class, accuracy, precision
of negative class, recall of negative class, F1 of negative class, MCC (Matthews
correlation coefficient), Cohen's kappa, (unweighted) macro-averaged F1 score,
weighted F1 score, BM (bookmaker's informedness). The output also shows the
proportions of true negatives, false negatives, false positives and true positives.
If `bs` was specified, then the resulting data.frame also produces the bootstrapped
SEs and CIs (columns ending in `boot_se`,`boot_lwr`, `boot_upr`): these are based
on stratified bootstrapping if the test set was drawn through stratified sampling.
If `se` was set to `TRUE`, analytic SEs are included in the output data.frame too
for precision, recall and F1 score (columns `f1_se`, `recall_se`, `precision_se`).
These SEs are valid for SRS and two-bin efficient stratification by positives vs
negatives. If proportional stratification was used when samplingpositives and
negatives, the analytic SEs are conservative. If other stratification regime was
used, these SEs should not be trusted and bootstrapped SEs/CIs should be considered
instead.
}
\description{
This function estimates performance metrics given an annotated test set
}
\details{
This function can be used on a test set drawn from simple random sampling, or from
stratified sampling if sampling probabilities are provided. The function unbiasedly
estimates the proportion of observations in each cell of the test set confusion
matrix, using stratified estimators if needed, and then produces key metrics based
on them by internally calling \code{\link{do_metrics}}. The input data should
contain a column capturing whether each observation exhibits the outcome (1/TRUE)
or not (0/FALSE), and a column capturing the predicted label (either predicted
probability, or binary label in either numeric or logical format). The following
metrics are supported: precision, recall, F1 of positive class, accuracy, precision
of negative class, recall of negative class, F1 of negative class, MCC (Matthews
correlation coefficient), Cohen's kappa, (unweighted) macro-averaged F1 score,
weighted F1 score, BM (bookmaker's informedness). The output also shows the
proportions of true negatives, false negatives, false positives and true positives.
}
\examples{
## example 1: compute metrics after stratified sampling using probability weights
data(sample_df)
stratified_metrics(data = sample_df, truth = "truth", pred = "score", probs="Prob",
                   threshold = 0.5, strata = "strata", se=FALSE)
## example 2: same as example 1 but with bootstrapped SEs/CIs
data(sample_df)
stratified_metrics(data = sample_df, truth = "truth", pred = "score", probs="Prob",
                   threshold = 0.5, strata = "strata", se=FALSE, bs=200)
## example 3: same as example 1 but assuming the test set is a SRS from the
## population. since it's a SRS, analytic SEs and CIs are valid and computed
data(sample_df)
sample_df$Prob <- 1
stratified_metrics(data = sample_df, truth = "truth", pred = "score", probs="Prob",
                   threshold = 0.5, strata = "strata", se=TRUE)
## alternatively, can achieve the same with
stratified_metrics(data = sample_df, truth = "truth", pred = "score", probs=NULL,
                   threshold = 0.5, strata = "strata", se=TRUE)
## can additionally get bootstrapped SEs and CIs with
stratified_metrics(data = sample_df, truth = "truth", pred = "score", probs=NULL,
                   threshold = 0.5, strata = "strata", se=TRUE, bs=200)
## example 4: same as example 1 but computing SEs analytically.
## this assumes that the test set is based on positive-negative two-bin
## stratification. this provides conservative inference if the test set is drawn
## by optimal stratification (first picking the number of positives and negatives
## as in two-bin stratification, then proportional stratification within positive
## and negative subsamples). the SEs are invalid if the stratification regime does
## not stratify on the predicted probability of the outcome.
stratified_metrics(data = sample_df, truth = "truth", pred = "score", probs="Prob",
                   threshold = 0.5, strata = "strata", se=TRUE)
}
\seealso{
\code{\link{do_metrics}}, \code{\link{se_srs}}, \code{\link{se_strat}}
}
